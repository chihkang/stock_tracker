diff --git a/.DS_Store b/.DS_Store
index eaaf00c..c4c6147 100644
Binary files a/.DS_Store and b/.DS_Store differ
diff --git a/src/stock_tracker/__main__.py b/src/stock_tracker/__main__.py
index b581d0f..820a32d 100644
--- a/src/stock_tracker/__main__.py
+++ b/src/stock_tracker/__main__.py
@@ -1,54 +1,98 @@
 import sys
+import os
 import argparse
-from .scraper.finance_scraper import get_multiple_stock_prices
-from .formatters.console_formatter import format_output
-from .portfolio.portfolio_manager import PortfolioManager
-from .exceptions import StockTrackerError
+from stock_tracker.utils.error_handler import error_handler, setup_logging
+from stock_tracker.portfolio.portfolio_manager import PortfolioManager
+from stock_tracker.scraper.finance_scraper import get_multiple_stock_prices
+from stock_tracker.formatters.console_formatter import format_output
 
-def parse_arguments() -> argparse.Namespace:
-    """解析命令列參數"""
+logger = setup_logging()
+
+def parse_arguments():
     parser = argparse.ArgumentParser(description='股票價格追蹤器')
     subparsers = parser.add_subparsers(dest='command', help='可用命令')
     
-    # 查詢股票價格命令
     query_parser = subparsers.add_parser('query', help='查詢股票價格')
     query_parser.add_argument('symbols', nargs='+', help='股票代號列表')
     
-    # 更新投資組合命令
     portfolio_parser = subparsers.add_parser('portfolio', help='更新投資組合')
     portfolio_parser.add_argument('--file', default='portfolio.json', help='投資組合檔案路徑')
+    portfolio_parser.add_argument('--charts', action='store_true', help='生成視覺化圖表')
+    portfolio_parser.add_argument('--output-dir', default='plots', help='圖表輸出目錄')
     
     return parser.parse_args()
 
-def main(args: list = None) -> int:
-    """主程式進入點"""
-    if args is None:
-        args = sys.argv[1:]
+@error_handler
+def main(args=None):
+    logger.info("程式啟動")
+    
+    if getattr(sys, 'frozen', False):
+        bundle_dir = os.path.dirname(sys.executable)
+        logger.info(f"Bundle 目錄: {bundle_dir}")
+        
+        if sys.platform == 'darwin':
+            if '.app' in bundle_dir:
+                bundle_dir = os.path.dirname(os.path.dirname(bundle_dir))
+        
+        os.chdir(bundle_dir)
+        logger.info(f"工作目錄已切換至: {os.getcwd()}")
     
     try:
-        args = parse_arguments()
+        if args is None:
+            args = parse_arguments()
         
+        logger.info(f"執行命令: {args.command}")
+            
         if args.command == 'query':
-            # 查詢股票價格
+            logger.info(f"查詢股票: {args.symbols}")
             prices = get_multiple_stock_prices(args.symbols)
             format_output(prices)
+            
         elif args.command == 'portfolio':
-            # 更新投資組合
+            if not os.path.exists(args.file):
+                logger.error(f"找不到配置文件: {args.file}")
+                raise FileNotFoundError(f"找不到必要的配置文件: {args.file}")
+            
+            logger.info(f"載入投資組合: {args.file}")
             portfolio = PortfolioManager(args.file)
-            portfolio.update_prices()
-            portfolio.print_portfolio()
+            
+            try:
+                portfolio.update_prices()
+                portfolio.print_portfolio()
+                
+                if args.charts:
+                    logger.info("生成視覺化圖表")
+                    try:
+                        import matplotlib
+                        portfolio.generate_charts(args.output_dir)
+                        logger.info(f"圖表已生成在 {args.output_dir} 目錄")
+                    except ImportError:
+                        logger.error("未安裝 matplotlib，無法生成圖表")
+                        print("\n請安裝必要套件：pip install matplotlib")
+                        return 1
+                    except Exception as e:
+                        logger.error(f"生成圖表時發生錯誤: {str(e)}")
+                        print(f"\n生成圖表時發生錯誤: {str(e)}")
+                        return 1
+                
+            except Exception as e:
+                logger.error(f"更新投資組合時發生錯誤: {str(e)}")
+                raise
         else:
+            logger.error("未指定有效的命令")
             print("請指定命令: query 或 portfolio")
             return 1
             
         return 0
         
-    except StockTrackerError as e:
-        print(f"錯誤: {str(e)}", file=sys.stderr)
-        return 1
+    except KeyboardInterrupt:
+        logger.info("使用者中斷執行")
+        return 130
     except Exception as e:
-        print(f"未預期的錯誤: {str(e)}", file=sys.stderr)
-        return 2
+        logger.error(f"執行時發生未預期的錯誤: {str(e)}")
+        raise
+    finally:
+        logger.info("程式結束")
 
 if __name__ == '__main__':
     sys.exit(main())
\ No newline at end of file
diff --git a/src/stock_tracker/portfolio/portfolio_manager.py b/src/stock_tracker/portfolio/portfolio_manager.py
index 6a5f917..7d81bf2 100644
--- a/src/stock_tracker/portfolio/portfolio_manager.py
+++ b/src/stock_tracker/portfolio/portfolio_manager.py
@@ -1,31 +1,31 @@
 import json
-from ..scraper.exchange_rate_scraper import get_exchange_rate
-from ..utils.market_utils import should_update_price, get_market_from_symbol, is_market_open
-from ..utils.time_utils import get_current_timestamp
-from .calculator import PortfolioCalculator
-from .formatter import PortfolioFormatter
-from .updater import PortfolioUpdater
+from datetime import datetime
+import pytz
+from prettytable import PrettyTable, PLAIN_COLUMNS
+from stock_tracker.scraper.finance_scraper import get_multiple_stock_prices
+from stock_tracker.scraper.exchange_rate_scraper import get_exchange_rate
+from stock_tracker.utils.market_utils import (
+    should_update_price,
+    get_market_from_symbol,
+    format_market_hours,
+    is_market_open
+)
+from stock_tracker.utils.time_utils import get_current_timestamp
 
 class PortfolioManager:
     def __init__(self, file_path='portfolio.json'):
         self.file_path = file_path
         self.portfolio = self._load_portfolio()
-        self.calculator = PortfolioCalculator()
-        self.formatter = PortfolioFormatter()
-        self.updater = PortfolioUpdater()
-
+        
     def _load_portfolio(self):
-        """載入投資組合資料"""
         with open(self.file_path, 'r', encoding='utf-8') as f:
             return json.load(f)
-
+            
     def _save_portfolio(self):
-        """儲存投資組合資料"""
         with open(self.file_path, 'w', encoding='utf-8') as f:
             json.dump(self.portfolio, f, indent=2, ensure_ascii=False)
-
+    
     def update_exchange_rate(self):
-        """更新匯率"""
         try:
             new_rate = get_exchange_rate('USD-TWD')
             self.portfolio['exchange rate'] = f"{new_rate:.2f}"
@@ -35,14 +35,22 @@ class PortfolioManager:
         except Exception as e:
             print(f"更新匯率失敗: {str(e)}")
             return float(self.portfolio['exchange rate'])
-
+    
+    def _calculate_total_value(self):
+        total_value_twd = 0
+        exchange_rate = float(self.portfolio['exchange rate'])
+        
+        for stock in self.portfolio['stocks']:
+            value_twd = stock['price'] * stock['quantity']
+            if stock['currency'] == 'USD':
+                value_twd *= exchange_rate
+            total_value_twd += value_twd
+        
+        return total_value_twd
+            
     def update_prices(self):
-        """更新所有股票價格"""
         self.update_exchange_rate()
-        exchange_rate = float(self.portfolio['exchange rate'])
-        needs_recalculation = False
         
-        # 收集更新資訊
         symbols_to_update = []
         market_status = {}
         
@@ -52,102 +60,108 @@ class PortfolioManager:
                 symbols_to_update.append(stock['name'])
             if market not in market_status:
                 market_status[market] = is_market_open(market)
-                # 如果任何市場開盤中，就需要重新計算佔比
-                if market_status[market]:
-                    needs_recalculation = True
         
-        self.formatter.print_market_status(market_status)
+        print("\n市場狀態:")
+        for market, is_open in market_status.items():
+            trading_hours = format_market_hours(market)
+            if market in ['NASDAQ', 'NYSE', 'NYSEARCA']:
+                if is_open:
+                    print(f"{market}: {trading_hours} - 交易中")
+                else:
+                    print(f"{market}: {trading_hours} - 收盤中 (使用最新收盤價)")
+            else:
+                if is_open:
+                    print(f"{market}: {trading_hours} - 交易中")
+                else:
+                    print(f"{market}: {trading_hours} - 收盤中")
         
-        # 即使沒有股票需要更新價格，也要檢查是否需要重新計算佔比
-        if not symbols_to_update and needs_recalculation:
-            self._recalculate_portfolio()
-            return
-        elif not symbols_to_update:
+        if not symbols_to_update:
             print("\n股票價格更新狀態:")
-            print("- 所有市場均已收盤，使用最新收盤價")
-            return
+            print("- 美股已收盤，使用最新收盤價")
+            print("- 台股無需更新")
             
-        self._handle_price_updates(symbols_to_update)
-
-    def _recalculate_portfolio(self):
-        """重新計算投資組合總值和佔比"""
-        exchange_rate = float(self.portfolio['exchange rate'])
-        total_value_twd = self.calculator.calculate_total_value(
-            self.portfolio['stocks'], 
-            exchange_rate
-        )
-        
-        if abs(total_value_twd - self.portfolio['totalValue']) > 0.01:
-            print("\n重新計算投資組合:")
-            print(f"- 原總值: TWD {self.portfolio['totalValue']:,.2f}")
-            print(f"- 新總值: TWD {total_value_twd:,.2f}")
+            total_value_twd = self._calculate_total_value()
+            if abs(total_value_twd - self.portfolio['totalValue']) > 0.01:
+                print("\n重新計算投資組合:")
+                print(f"- 原總值: TWD {self.portfolio['totalValue']:,.2f}")
+                print(f"- 新總值: TWD {total_value_twd:,.2f}")
+                
+                self.portfolio['totalValue'] = total_value_twd
+                exchange_rate = float(self.portfolio['exchange rate'])
+                for stock in self.portfolio['stocks']:
+                    value_twd = stock['price'] * stock['quantity']
+                    if stock['currency'] == 'USD':
+                        value_twd *= exchange_rate
+                    stock['percentageOfTotal'] = round((value_twd / total_value_twd) * 100, 2)
+                
+                self._save_portfolio()
+                print("- 已更新投資組合佔比")
+            return
             
-            self.portfolio['totalValue'] = total_value_twd
-            self.calculator.update_percentages(
-                self.portfolio['stocks'],
-                total_value_twd,
-                exchange_rate
-            )
-            self._save_portfolio()
-            print("- 已更新投資組合佔比")
-
-    def _handle_no_updates(self):
-        """處理無需更新的情況"""
-        print("\n股票價格更新狀態:")
-        print("- 美股已收盤，使用最新收盤價")
-        print("- 台股無需更新")
+        prices = get_multiple_stock_prices(symbols_to_update)
         
-        exchange_rate = float(self.portfolio['exchange rate'])
-        total_value_twd = self.calculator.calculate_total_value(
-            self.portfolio['stocks'], 
-            exchange_rate
-        )
-        
-        if abs(total_value_twd - self.portfolio['totalValue']) > 0.01:
-            print("\n重新計算投資組合:")
-            print(f"- 原總值: TWD {self.portfolio['totalValue']:,.2f}")
-            print(f"- 新總值: TWD {total_value_twd:,.2f}")
-            
-            self.portfolio['totalValue'] = total_value_twd
-            self.calculator.update_percentages(
-                self.portfolio['stocks'],
-                total_value_twd,
-                exchange_rate
-            )
-            self._save_portfolio()
-            print("- 已更新投資組合佔比")
-
-    def _handle_price_updates(self, symbols_to_update):
-        """處理需要更新價格的情況"""
-        update_count = self.updater.update_stock_prices(
-            self.portfolio['stocks'],
-            symbols_to_update
-        )
-        
-        if sum(update_count.values()) > 0:
-            exchange_rate = float(self.portfolio['exchange rate'])
+        update_count = 0
+        us_stocks_count = 0
+        local_stocks_count = 0
+        
+        for stock in self.portfolio['stocks']:
+            if stock['name'] in prices:
+                price_info = prices[stock['name']]
+                stock['price'] = price_info['price']
+                stock['lastUpdated'] = price_info['timestamp']
+                update_count += 1
+                
+                market = get_market_from_symbol(stock['name'])
+                if market in ['NASDAQ', 'NYSE', 'NYSEARCA']:
+                    us_stocks_count += 1
+                else:
+                    local_stocks_count += 1
+        
+        if update_count > 0 or local_stocks_count > 0:
+            total_value_twd = self._calculate_total_value()
             old_total = self.portfolio['totalValue']
-            total_value_twd = self.calculator.calculate_total_value(
-                self.portfolio['stocks'],
-                exchange_rate
-            )
-            
             self.portfolio['totalValue'] = total_value_twd
-            self.calculator.update_percentages(
-                self.portfolio['stocks'],
-                total_value_twd,
-                exchange_rate
-            )
+            
+            exchange_rate = float(self.portfolio['exchange rate'])
+            for stock in self.portfolio['stocks']:
+                value_twd = stock['price'] * stock['quantity']
+                if stock['currency'] == 'USD':
+                    value_twd *= exchange_rate
+                stock['percentageOfTotal'] = round((value_twd / total_value_twd) * 100, 2)
             
             self._save_portfolio()
-            self.formatter.print_update_summary(update_count, old_total, total_value_twd)
-
+            
+            print("\n更新統計:")
+            if us_stocks_count > 0:
+                print(f"- 更新了 {us_stocks_count} 支美股價格（收盤價）")
+            if local_stocks_count > 0:
+                print(f"- 更新了 {local_stocks_count} 支台股價格")
+            if abs(total_value_twd - old_total) > 0.01:
+                print(f"- 投資組合總值變動: TWD {old_total:,.2f} → TWD {total_value_twd:,.2f}")
+    
     def print_portfolio(self):
-        """顯示投資組合資訊"""
-        table = self.formatter.create_table()
-        exchange_rate = float(self.portfolio['exchange rate'])
+        table = PrettyTable()
+        table.set_style(PLAIN_COLUMNS)
+        
+        table.field_names = ["股票代號", "價格", "數量", "總值 (TWD)", "比例", "更新時間"]
+        
+        for field in table.field_names:
+            table.align[field] = "l"
         
-        # 添加資料行
+        min_widths = {
+            "股票代號": 15,
+            "價格": 15,
+            "數量": 15,
+            "總值 (TWD)": 20,
+            "比例": 10,
+            "更新時間": 35
+        }
+        for field, width in min_widths.items():
+            table._min_width[field] = width
+
+        table.border = False
+        
+        exchange_rate = float(self.portfolio['exchange rate'])
         for stock in self.portfolio['stocks']:
             value_twd = stock['price'] * stock['quantity']
             if stock['currency'] == 'USD':
@@ -162,7 +176,6 @@ class PortfolioManager:
                 stock['lastUpdated']
             ])
         
-        # 輸出內容
         table_width = len(table.get_string().split('\n')[0])
         separator = "=" * table_width
         divider = "-" * table_width
@@ -173,4 +186,8 @@ class PortfolioManager:
         print(f"匯率: {self.portfolio['exchange rate']} TWD/USD")
         print(divider)
         print(table.get_string())
-        print(separator)
\ No newline at end of file
+        print(separator)
+
+    def generate_charts(self, output_dir='plots'):
+        from stock_tracker.utils.plot_utils import create_portfolio_plots
+        create_portfolio_plots(self.portfolio, output_dir)
\ No newline at end of file
